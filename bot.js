const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs-extra');
const config = require('./config');

const bot = new TelegramBot(config.token, { polling: true });

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
const EMOJI = {
  start: 'üëã',
  exchange: 'üîÑ',
  crypto: '‚Çø',
  fiat: 'üíµ',
  network: 'üì°',
  wallet: 'üí≥',
  card: 'üí¥',
  timer: '‚è≥',
  success: '‚úÖ',
  details: 'üìù',
  paid: 'üí∞',
  warning: '‚ö†Ô∏è',
  copy: 'üìã'
};

// –î–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–∞–º –∏ —Å–µ—Ç—è–º
const cryptoCurrencies = [
  { code: 'BTC', name: `${EMOJI.crypto} Bitcoin`, networks: ['Bitcoin'] },
  { code: 'ETH', name: `${EMOJI.crypto} Ethereum`, networks: ['Ethereum', 'BSC'] },
  { code: 'USDT', name: `${EMOJI.crypto} Tether`, networks: ['ERC20', 'TRC20', 'BEP20'] },
  { code: 'TRX', name: `${EMOJI.crypto} TRON`, networks: ['TRC20'] }
];

const fiatCurrencies = [
  { code: 'RUB', name: `${EMOJI.fiat} –†—É–±–ª–∏` },
  { code: 'USD', name: `${EMOJI.fiat} –î–æ–ª–ª–∞—Ä—ã` },
  { code: 'EUR', name: `${EMOJI.fiat} –ï–≤—Ä–æ` }
];

// –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∞
const sessions = {};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const showMainMenu = (chatId) => {
  return bot.sendMessage(
    chatId,
    `${EMOJI.start} *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç*\n\n` +
    `${EMOJI.exchange} *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:*`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: `${EMOJI.crypto} –ö—Ä–∏–ø—Ç–∞ ‚Üí ${EMOJI.fiat} –§–∏–∞—Ç`, callback_data: 'crypto_to_fiat' }],
          [{ text: `${EMOJI.fiat} –§–∏–∞—Ç ‚Üí ${EMOJI.crypto} –ö—Ä–∏–ø—Ç–∞`, callback_data: 'fiat_to_crypto' }]
        ]
      }
    }
  );
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  await showMainMenu(msg.chat.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  if (!sessions[userId]) sessions[userId] = {};

  try {
    // –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
    if (data === 'crypto_to_fiat') {
      sessions[userId].direction = 'crypto_to_fiat';
      await showCurrencyMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:', cryptoCurrencies, 'from');
    } 
    else if (data === 'fiat_to_crypto') {
      sessions[userId].direction = 'fiat_to_crypto';
      await showCurrencyMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:', fiatCurrencies, 'from');
    }

    // –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞
    else if (data.startsWith('from_')) {
      const currency = data.split('_')[1];
      sessions[userId].fromCurrency = currency;

      if (sessions[userId].direction === 'crypto_to_fiat') {
        await showCurrencyMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:', fiatCurrencies, 'to');
      } else {
        await showCurrencyMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:', cryptoCurrencies, 'to');
      }
    }

    // –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    else if (data.startsWith('to_')) {
      const currency = data.split('_')[1];
      sessions[userId].toCurrency = currency;

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç—É - –≤—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—å
      if (sessions[userId].direction === 'fiat_to_crypto') {
        const selectedCrypto = cryptoCurrencies.find(c => c.code === currency);
        if (selectedCrypto?.networks?.length > 0) {
          await showNetworkMenu(chatId, selectedCrypto.networks);
          return;
        }
      }

      // –ò–Ω–∞—á–µ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
      await bot.sendMessage(
        chatId,
        `${EMOJI.fiat} *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞:*\n\n` +
        `–ü—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 0.5`,
        { parse_mode: 'Markdown' }
      );
    }

    // –í—ã–±–æ—Ä —Å–µ—Ç–∏
    else if (data.startsWith('net_')) {
      sessions[userId].network = data.split('_')[1];
      await bot.sendMessage(
        chatId,
        `${EMOJI.fiat} *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞:*\n\n` +
        `–ü—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 0.5`,
        { parse_mode: 'Markdown' }
      );
    }

    // –ö–Ω–æ–ø–∫–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    else if (data === 'paid') {
      await bot.sendMessage(
        chatId,
        `${EMOJI.success} *–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n` +
        `${EMOJI.timer} –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 15-20 –º–∏–Ω—É—Ç.`,
        { parse_mode: 'Markdown' }
      );
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      await bot.sendMessage(
        config.adminId,
        `${EMOJI.paid} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${query.from.username || userId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ –æ–±–º–µ–Ω—É`
      );
    }

    // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    else if (data.startsWith('copy_')) {
      const textToCopy = data.split('_').slice(1).join('_');
      await bot.answerCallbackQuery(query.id, {
        text: '–†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä!',
        show_alert: false
      });
    }

  } catch (error) {
    console.error('Error in callback handler:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
bot.on('callback_query', async (query) => {
  if (query.from.id !== config.adminId) return;

  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (query.data.startsWith('send_details_')) {
      const userId = query.data.split('_')[2];
      sessions.admin = { userId, step: 'select_currency' };

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
      await bot.sendMessage(
        query.message.chat.id,
        `${EMOJI.details} *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:*`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: `${EMOJI.crypto} –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞`, callback_data: 'admin_crypto' }],
              [{ text: `${EMOJI.fiat} –§–∏–∞—Ç`, callback_data: 'admin_fiat' }]
            ]
          }
        }
      );
    }

    // –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    else if (query.data === 'admin_crypto') {
      sessions.admin.currencyType = 'crypto';
      sessions.admin.step = 'select_crypto';
      
      await showCurrencyMenu(
        query.message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:',
        cryptoCurrencies,
        'admin_currency'
      );
    }
    else if (query.data === 'admin_fiat') {
      sessions.admin.currencyType = 'fiat';
      sessions.admin.step = 'select_fiat';
      
      await showCurrencyMenu(
        query.message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É:',
        fiatCurrencies,
        'admin_currency'
      );
    }

    // –ê–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –≤–∞–ª—é—Ç—É
    else if (query.data.startsWith('admin_currency_')) {
      sessions.admin.currency = query.data.split('_')[2];
      
      // –ï—Å–ª–∏ –∫—Ä–∏–ø—Ç–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ—Ç—å
      if (sessions.admin.currencyType === 'crypto') {
        const selectedCrypto = cryptoCurrencies.find(c => c.code === sessions.admin.currency);
        if (selectedCrypto?.networks?.length > 0) {
          sessions.admin.step = 'select_network';
          await showNetworkMenu(query.message.chat.id, selectedCrypto.networks, 'admin_net');
          return;
        }
      }
      
      // –ò–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      sessions.admin.step = 'enter_details';
      await bot.sendMessage(
        query.message.chat.id,
        `${EMOJI.details} *–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n\n` +
        `–î–ª—è –∫—Ä–∏–ø—Ç—ã: –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n` +
        `–î–ª—è —Ñ–∏–∞—Ç–∞: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã/—Å—á–µ—Ç–∞`,
        { parse_mode: 'Markdown' }
      );
    }

    // –ê–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª —Å–µ—Ç—å
    else if (query.data.startsWith('admin_net_')) {
      sessions.admin.network = query.data.split('_')[2];
      sessions.admin.step = 'enter_details';
      
      await bot.sendMessage(
        query.message.chat.id,
        `${EMOJI.details} *–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n\n` +
        `–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ ${sessions.admin.currency} (${sessions.admin.network})`,
        { parse_mode: 'Markdown' }
      );
    }

  } catch (error) {
    console.error('Error in admin callback handler:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('message', async (msg) => {
  if (msg.text?.startsWith('/') || msg.from.is_bot) return;

  const userId = msg.from.id;
  const session = sessions[userId];
  if (!session) return;

  try {
    // –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è —Å—É–º–º–∞
    if (!session.amount && session.fromCurrency && session.toCurrency) {
      const amount = parseFloat(msg.text.replace(',', '.'));
if (isNaN(amount)) {
  return bot.sendMessage(
    msg.chat.id,
    `${EMOJI.warning} *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!*\n\n` +
    `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 0.5)`,
    { parse_mode: 'Markdown' }
  );
}
      if (amount <= 0) {
        return bot.sendMessage(
          msg.chat.id,
          `${EMOJI.warning} *–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!*`,
          { parse_mode: 'Markdown' }
        );
      }

      session.amount = amount;
      
      // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã
      const rate = getExchangeRate(session.fromCurrency, session.toCurrency);
      session.convertedAmount = (session.direction === 'crypto_to_fiat') 
        ? amount * rate
        : amount / rate;

      // –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
      const requestText = (session.direction === 'crypto_to_fiat')
        ? `${EMOJI.card} *–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ${session.toCurrency}:*\n\n` +
          `‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n` +
          `‚Ä¢ –ë–∞–Ω–∫ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n` +
          `‚Ä¢ –ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã`
        : `${EMOJI.wallet} *–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ${session.toCurrency}${session.network ? ` (${session.network})` : ''}:*`;
      
      await bot.sendMessage(msg.chat.id, requestText, { parse_mode: 'Markdown' });
    }
    // –ï—Å–ª–∏ –≤–≤–æ–¥—è—Ç—Å—è —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    else if (session.amount && !session.requisites) {
      session.requisites = msg.text;

      // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(
        msg.chat.id,
        `${EMOJI.exchange} *–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –æ–±–º–µ–Ω–∞:*\n\n` +
        `‚ñ´Ô∏è *–û—Ç–¥–∞–µ—Ç–µ:* ${session.amount} ${session.fromCurrency}\n` +
        `‚ñ´Ô∏è *–ü–æ–ª—É—á–∞–µ—Ç–µ:* ~${session.convertedAmount.toFixed(6)} ${session.toCurrency}\n\n` +
        `${EMOJI.timer} *–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã...*`,
        { parse_mode: 'Markdown' }
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      const adminMessage = 
        `üìå *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω:*\n\n` +
        `‚ñ´Ô∏è *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* ${session.fromCurrency} ‚Üí ${session.toCurrency}\n` +
        `‚ñ´Ô∏è *–°—É–º–º–∞:* ${session.amount} ${session.fromCurrency}\n` +
        `‚ñ´Ô∏è *–ü–æ–ª—É—á–∞–µ—Ç:* ~${session.convertedAmount.toFixed(6)} ${session.toCurrency}\n` +
        (session.network ? `‚ñ´Ô∏è *–°–µ—Ç—å:* ${session.network}\n` : '') +
        `‚ñ´Ô∏è *–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:*\n${session.requisites}\n\n` +
        `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @${msg.from.username || '–Ω–µ—Ç'} (ID: ${userId})`;

      await bot.sendMessage(config.adminId, adminMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: `${EMOJI.details} –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`, callback_data: `send_details_${userId}` }
          ]]
        }
      });

      // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
      sessions[userId] = {};
    }

  } catch (error) {
    console.error('Error in user message handler:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
bot.on('message', async (msg) => {
  if (msg.from.id !== config.adminId || !sessions.admin) return;

  try {
    // –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    if (sessions.admin.step === 'enter_details') {
      const userId = sessions.admin.userId;
      const currencyType = sessions.admin.currencyType;
      const currency = sessions.admin.currency;
      const network = sessions.admin.network;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
      let detailsText = '';
      if (currencyType === 'crypto') {
        detailsText = 
          `${EMOJI.wallet} *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã ${currency}${network ? ` (${network})` : ''}:*\n\n` +
          `\`${msg.text}\`\n\n` +
          `${EMOJI.copy} –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å`;
      } else {
        detailsText = 
          `${EMOJI.card} *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (${currency}):*\n\n` +
          `\`${msg.text}\`\n\n` +
          `${EMOJI.copy} –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å`;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(
        userId,
        detailsText,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: `${EMOJI.success} –Ø –æ–ø–ª–∞—Ç–∏–ª`, callback_data: 'paid' }],
              [{ text: `${EMOJI.copy} –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`, callback_data: `copy_${msg.text}` }]
            ]
          }
        }
      );
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      await bot.sendMessage(
        config.adminId,
        `${EMOJI.success} *–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!*`,
        { parse_mode: 'Markdown' }
      );
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∞
      delete sessions.admin;
    }

  } catch (error) {
    console.error('Error in admin message handler:', error);
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function showCurrencyMenu(chatId, text, currencies, prefix) {
  const buttons = currencies.map(c => [{ text: c.name, callback_data: `${prefix}_${c.code}` }]);
  
  await bot.sendMessage(
    chatId,
    `${EMOJI.exchange} *${text}*`,
    {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: buttons }
    }
  );
}

async function showNetworkMenu(chatId, networks, prefix = 'net') {
  const buttons = networks.map(n => [{ text: `${EMOJI.network} ${n}`, callback_data: `${prefix}_${n}` }]);
  
  await bot.sendMessage(
    chatId,
    `${EMOJI.network} *–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:*`,
    {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: buttons }
    }
  );
}

function getExchangeRate(from, to) {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
  // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
  const rates = {
    'BTC_USD': 50000,
    'ETH_USD': 3000,
    'USDT_USD': 1,
    'TRX_USD': 0.1,
    'RUB_USD': 0.014,
    'EUR_USD': 1.2
  };
  
  const fromRate = rates[`${from}_USD`] || 1;
  const toRate = rates[`${to}_USD`] || 1;
  
  return toRate / fromRate;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});